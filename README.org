#+TITLE: Jonathan Jin's Emacs Configuration
#+AUTHOR: Jonathan Jin
#+PROPERTY: header-args:emacs-lisp :exports code :results none :tangle init.el

[[http://img.shields.io/:license-unlicense-blue.svg]]

* Table of Contents                                                  :TOC:TOC_1:
 - [[#preamble][Preamble]]
 - [[#general-configurations][General Configurations]]
 - [[#keys][Keys]]
 - [[#languages][Languages]]
 - [[#packages][Packages]]
 - [[#unlicense][(Un)license]]

* Preamble

  #+BEGIN_SRC emacs-lisp
    (add-to-list 'load-path (expand-file-name "~/.emacs.d/elpa"))

    (setq package-archives '(("gnu"        . "http://elpa.gnu.org/packages/")
                              ("marmalade" . "http://marmalade-repo.org/packages/")
                              ("melpa"     . "http://melpa.milkbox.net/packages/")
                              ("org"       . "http://orgmode.org/elpa/")))

    (package-initialize)
  #+END_SRC

** Baseline packages

   #+BEGIN_SRC emacs-lisp
     (unless (package-installed-p 'use-package)
       (package-install 'use-package))

     (require 'use-package)
     (use-package diminish)

     (use-package names
       :ensure t
       :pin melpa)
   #+END_SRC

** Functions

   #+BEGIN_SRC emacs-lisp
     (define-namespace jjin-
       (defun load-if-exists (file)
         "Loads file, conditional on its existence; no effect if non-existent."
         (when (file-exists-p file)
           (load-file file)))


       (defun kill-current-buffer ()
         (interactive)
         (kill-buffer (current-buffer)))

       (defun window-toggle-split-direction ()
         "Switch window split from horizontally to vertically, or vice versa.

     i.e. change right window to bottom, or change bottom window to right."
         (interactive)
         (require 'windmove)
         (let ((done))
           (dolist (dirs '((right . down) (down . right)))
             (unless done
               (let* ((win (selected-window))
                       (nextdir (car dirs))
                       (neighbour-dir (cdr dirs))
                       (next-win (windmove-find-other-window nextdir win))
                       (neighbour1 (windmove-find-other-window neighbour-dir win))
                       (neighbour2 (if next-win (with-selected-window next-win
                                                  (windmove-find-other-window
                                                    neighbour-dir next-win)))))

                 (setq done (and (eq neighbour1 neighbour2)
                              (not (eq (minibuffer-window) next-win))))
                 (if done
                   (let* ((other-buf (window-buffer next-win)))
                     (delete-window next-win)
                     (if (eq nextdir 'right)
                       (split-window-vertically)
                       (split-window-horizontally))
                     (set-window-buffer (windmove-find-other-window neighbour-dir)
                       other-buf))))))))

       (defun insert-newline-after ()
         (interactive)
         (let ((oldpos (point)))
           (end-of-line)
           (newline-and-indent)
           (goto-char oldpos)))

       (defun set-opacity (value)
         "Sets the opacity of the frame window. 0=transparent/100=opaque"
         (interactive "nOpacity Value (0 - 100 opaque): ")
         (set-frame-parameter (selected-frame) 'alpha value))

       (defun dired-at-current ()
         (interactive)
         (dired default-directory))

       (defun prev-window ()
         (interactive)
         (other-window -1))

       (defun append-to-list (list-var elements)

         "Append ELEMENTS to the end of LIST-VAR.

     The return value is the new value of LIST-VAR."
         (unless (consp elements)
           (error "ELEMENTS must be a list"))
         (let ((list (symbol-value list-var)))
           (if list
             (setcdr (last list) elements)
             (set list-var elements)))
         (symbol-value list-var))

       ;; credit: https://gist.github.com/mads379/3402786
       (defun toggle-maximize-window ()
         "Maximize window"
         (interactive)
         (if (= 1 (length (window-list)))
           (jump-to-register '_)
           (progn
             (window-configuration-to-register '_)
             (delete-other-windows))))

       (defun redefine-key (map key-old key-new)
         (define-key map key-new (lookup-key map key-old))
         (define-key map key-old nil))

       ;; credit: https://github.com/abo-abo/hydra/blob/master/hydra-examples.el
       (defun kove-splitter-left (arg)
         "Move window splitter left."
         (interactive "p")
         (if (let ((windmove-wrap-around))
               (windmove-find-other-window 'right))
           (shrink-window-horizontally arg)
           (enlarge-window-horizontally arg)))

       ;; credit: https://github.com/abo-abo/hydra/blob/master/hydra-examples.el
       (defun move-splitter-right (arg)
         "Move window splitter right."
         (interactive "p")
         (if (let ((windmove-wrap-around))
               (windmove-find-other-window 'right))
           (enlarge-window-horizontally arg)
           (shrink-window-horizontally arg)))

       ;; credit: https://github.com/abo-abo/hydra/blob/master/hydra-examples.el
       (defun move-splitter-up (arg)
         "Move window splitter up."
         (interactive "p")
         (if (let ((windmove-wrap-around))
               (windmove-find-other-window 'up))
           (enlarge-window arg)
           (shrink-window arg)))

       ;; credit: https://github.com/abo-abo/hydra/blob/master/hydra-examples.el
       (defun move-splitter-down (arg)
         "Move window splitter down."
         (interactive "p")
         (if (let ((windmove-wrap-around))
               (windmove-find-other-window 'up))
           (shrink-window arg)
           (enlarge-window arg))))
   #+END_SRC

* General Configurations

  #+BEGIN_SRC emacs-lisp
    (jjin-load-if-exists "~/.secrets.el")

    (setq ring-bell-function 'ignore)

    (setq large-file-warning-threshold nil)

    (defun display-startup-echo-area-message ()
      (message "Happy hacking."))

    (setq
      user-mail-address "jjin082693@gmail.com"
      user-full-name  "Jonathan Jin"

      message-signature
      (concat "Jonathan Jin\n"
              "github.com/jinnovation\n"
              "jjin.me\n"))

    (setq
      inhibit-startup-screen t
      inhibit-startup-message t
      initial-scratch-message ""
      visible-bell t
      use-dialog-box nil)

    (setq-default
      fill-column 80
      indent-tabs-mode nil
      tab-width 4)

    (setq next-line-add-newlines t)

    (setq scroll-step 1
      scroll-conservatively 10000
      scroll-margin 3)

    (fset 'yes-or-no-p 'y-or-n-p)

    (tool-bar-mode     0)
    (scroll-bar-mode   0)
    (menu-bar-mode     0)
    (line-number-mode  0)

    (blink-cursor-mode 0)

    (global-auto-revert-mode)

    (global-hl-line-mode 1)
    (column-number-mode  1)
    (show-paren-mode     1)

    (electric-pair-mode)

    (delete-selection-mode +1)

    ;; highlights strings like TODO, FIXME, etc.
    (add-hook 'prog-mode-hook 'turn-on-auto-fill)
    (add-hook 'text-mode-hook 'turn-on-auto-fill)

    (fringe-mode '(4 . 0))

    (with-eval-after-load 'dired
      (define-key dired-mode-map (kbd "RET") 'dired-find-alternate-file))

    (setq browse-url-browser-function 'browse-url-xdg-open)
    (setq browse-url-generic-program (executable-find "chromium")
      shr-external-browser 'browse-url-generic)

    (put 'dired-find-alternate-file 'disabled nil)

    (setq echo-keystrokes 0)

    (setq image-dired-external-viewer "feh")
  #+END_SRC

** Appearance

*** Themes

    #+BEGIN_SRC emacs-lisp
      (use-package gotham-theme
        :if window-system
        :ensure t
        :config
        (load-theme 'gotham t))
    #+END_SRC

*** General

    #+BEGIN_SRC emacs-lisp
      (setq-default x-stretch-cursor t)

      (setq custom-safe-themes t)

      (defconst bg-color "black")
      (defconst default-font "Terminus 08")
      (set-frame-font default-font)
      (set-face-attribute 'mode-line nil :font default-font)

      (set-background-color bg-color)
      (set-face-attribute 'fringe nil :background bg-color)

      (when (functionp 'set-fontset-font)
        (set-fontset-font "fontset-default"
          'unicode
          (font-spec :family "DejaVu Sans Mono")))

      (jjin-set-opacity 85)
    #+END_SRC

** Environment-specific

*** Mac

    #+BEGIN_SRC emacs-lisp
      (defconst macosp (eq system-type 'darwin)
        "t when system is Mac.")

      (when macosp
          (setq mac-command-modifier 'meta))
    #+END_SRC

* Keys

** Personal maps

   #+BEGIN_SRC emacs-lisp
     (define-prefix-command 'jjin-project-map)
     (bind-key "H-p" 'jjin-project-map)

     (define-prefix-command 'jjin-vc-map)
     (bind-key "H-g" 'jjin-vc-map)

     (define-prefix-command 'jjin-chat-map)
     (bind-key "H-i" 'jjin-chat-map)

     (define-prefix-command 'jjin-window-map)
     (bind-key "H-w" 'jjin-window-map)

     (define-prefix-command 'jjin-comment-map)
     (bind-key "H-c" 'jjin-comment-map)
   #+END_SRC

** Keybindings

   #+BEGIN_SRC emacs-lisp
     (bind-keys :map global-map
       ("C-x |"              . jjin-window-toggle-split-direction)
       ("C-x k"              . jjin-kill-current-buffer)
       ("H-s"                . save-buffer)

       ;; TODO: make prefix map for buffer manipulation
       ("H-b k"              . jjin-kill-current-buffer)
       ("H-b n"              . next-buffer)

       ("H-a r"              . align-regexp)
       ("H-a r"              . align-regexp)
       ("H-D"                . jjin-dired-at-current)
       ("RET"                . newline-and-indent))

     (unbind-key "<menu>")
     (unbind-key "M-`")
     (unbind-key "C-c C-w")
     (unbind-key "C-x C-n")      ; set-goal-column

     (unbind-key "<f10>")
     (unbind-key "<f11>")
     (unbind-key "M-<f10>")
     (unbind-key "<escape> <f10>")

     (bind-keys :map jjin-window-map
       ("v" . split-window-right)
       ("s" . split-window-below)
       ("j" . windmove-down)
       ("k" . windmove-up)
       ("h" . windmove-left)
       ("l" . windmove-right)
       ("z" . jjin-toggle-maximize-window)
       ("q" . delete-window)
       ("Q" . kill-buffer-and-window)
       ("H" . jjin-move-splitter-left)
       ("L" . jjin-move-splitter-right)
       ("J" . jjin-move-splitter-down)
       ("K" . jjin-move-splitter-up)
       ("b" . balance-windows))

     (bind-keys :map universal-argument-map
       ("C-u" . kill-whole-line)
       ("M-u" . universal-argument-more))
   #+END_SRC

* Languages

** C

   #+BEGIN_SRC emacs-lisp
     (setq c-block-comment-prefix "* ")

     (defvaralias 'c-basic-offset 'tab-width)
   #+END_SRC

** Lisp

   #+BEGIN_SRC emacs-lisp
     (setq lisp-indent-offset 2)

     (add-to-list 'auto-mode-alist '("emacs$" . emacs-lisp-mode))
     (add-to-list 'auto-mode-alist '("Cask" . emacs-lisp-mode))
   #+END_SRC

** Javascript

   #+BEGIN_SRC emacs-lisp
     (defvaralias 'js-indent-level 'tab-width)
   #+END_SRC

** LaTeX

   #+BEGIN_SRC emacs-lisp
     ;; sets latex-mode to compile w/ pdflatex by default
     (setq TeX-PDF-mode t
         TeX-parse-self t
         TeX-newline-function 'reindent-then-newline-and-indent)

     (eval-after-load "tex"
         '(setcdr (assoc "LaTeX" TeX-command-list)
              '("%`%l%(mode) -shell-escape%' %t"
                   TeX-run-TeX nil (latex-mode doctex-mode) :help "Run LaTeX")))

     ;; latex-mode-specific hooks (because latex-mode is not derived from prog-mode)
     (add-hook 'LaTeX-mode-hook
         (lambda ()
             (TeX-fold-mode 1)
             (auto-fill-mode)
             (add-to-list 'TeX-command-list '("XeLaTeX" "%`xelatex%(mode)%' %t"
                                                 TeX-run-TeX nil t))))
   #+END_SRC

** zsh

   #+BEGIN_SRC emacs-lisp
     (add-to-list 'auto-mode-alist '("zshrc$" . sh-mode))
     (add-to-list 'auto-mode-alist '("\\.zsh$" . sh-mode))
   #+END_SRC

* Packages

** =ace-window=

   #+BEGIN_SRC emacs-lisp
     (use-package ace-window
       :ensure t
       :init
       (setq aw-keys '(?a ?r ?s ?t ?q ?w ?f ?p))

       :config
       (add-to-list 'aw-ignored-buffers "mu4e-update")
       (bind-key "w" 'ace-window jjin-window-map))
   #+END_SRC

** =ansi-color=

   #+BEGIN_SRC emacs-lisp
     (use-package ansi-color
       :init
       (setq ansi-color-faces-vector
         [default bold shadow italic underline bold bold-italic bold])
       (setq compilation-scroll-output t)
       :config
       (defun colorize-compilation-buffer ()
         (toggle-read-only)
         (ansi-color-apply-on-region (point-min) (point-max))
         (toggle-read-only))

       (add-hook 'compilation-filter-hook 'colorize-compilation-buffer))
   #+END_SRC

** =circe=

   #+BEGIN_SRC emacs-lisp
     (use-package circe
       :commands (circe-chat-mode
                   circe-server-mode
                   circe-query-mode
                   circe-channel-mode)
       :bind ("H-I" . circe)
       :init
       (setq
         circe-default-nick "jjin"
         circe-default-user "jjin"
         circe-default-part-message "Peace."
         circe-default-quit-message "Peace.")

       (setq circe-use-cycle-completion t
         circe-reduce-lurker-spam t)

       (setq circe-network-options
         '(("Freenode"
             :nick "jjin"
             :channels ("#emacs" "#archlinux")
             :nickserv-password ,freenode-pass)
            ("Bitlbee"
              :service "6667"
              :nickserv-password ,bitlbee-pass
              :nickserv-mask "\\(bitlbee\\|root\\)!\\(bitlbee\\|root\\)@"
              :nickserv-identify-challenge "use the \x02identify\x02 command to identify yourself"
              :nickserv-identify-command "PRIVMSG &bitlbee :identify {password}"
              :nickserv-identify-confirmation "Password accepted, settings and accounts loaded")))

       (setq
         circe-format-self-say "<{nick}> {body}"
         circe-format-server-topic "*** Topic change by {origin}: {topic-diff}")
       (setq circe-color-nicks-everywhere t)

       :config
       (add-hook 'circe-chat-mode-hook 'my-circe-prompt)
       (defun my-circe-prompt ()
         (lui-set-prompt
           (concat (propertize (concat (buffer-name) ">")
                     'face 'circe-prompt-face)
             " ")))

       (enable-circe-color-nicks)

       (use-package helm-circe
         :config
         (bind-keys :map jjin-chat-map
           ("i" . helm-circe)
           ("n" . helm-circe-new-activity))))
   #+END_SRC

** =conf-mode=

   #+BEGIN_SRC emacs-lisp
     (use-package conf-mode
       :mode
       (("\\.service\\'"    . conf-unix-mode)
         ("\\.timer\\'"      . conf-unix-mode)
         ("\\.target\\'"     . conf-unix-mode)
         ("\\.mount\\'"      . conf-unix-mode)
         ("\\.automount\\'"  . conf-unix-mode)
         ("\\.slice\\'"      . conf-unix-mode)
         ("\\.socket\\'"     . conf-unix-mode)
         ("\\.path\\'"       . conf-unix-mode)
         ("conf$"            . conf-mode)
         ("rc$"              . conf-mode)))
   #+END_SRC

** =company=

   #+BEGIN_SRC emacs-lisp
     (use-package company
       :diminish company-mode
       :ensure t
       :config
       (add-hook 'after-init-hook 'global-company-mode)
       (setq company-idle-delay 0.1)
       (use-package helm-company
         :ensure t))
   #+END_SRC

** =doc-view-mode=

   #+BEGIN_SRC emacs-lisp
     (use-package doc-view
       :init
       (setq doc-view-resolution 200))
   #+END_SRC

** =debbugs=

   #+BEGIN_SRC emacs-lisp
     (use-package debbugs
       :ensure t)
   #+END_SRC

** =elfeed=

   #+BEGIN_SRC emacs-lisp
     (use-package elfeed
       :ensure t
       :commands (elfeed-search-mode elfeed-show-mode)
       :bind ("H-E" . elfeed)
       :init
       (setq elfeed-feeds
         '(("http://www.aljazeera.com/Services/Rss/?PostingId=2007731105943979989"
             news)
            ("http://rss.nytimes.com/services/xml/rss/nyt/HomePage.xml" news)
            ("http://ny.curbed.com/atom.xml" realestate news)
            ("http://www.avclub.com/feed/rss/" film entertainment news)
            ("http://fivethirtyeight.com/all/feed")
            ("http://www.tor.com/rss/frontpage_full" literature)
            ("http://feeds.feedburner.com/themillionsblog/fedw" literature)
            ("http://www.newyorker.com/feed/books" literature)
            ("http://feeds.feedburner.com/nybooks" literature)
            ("http://longform.org/feed.rss")
            ("http://feeds.feedburner.com/mcsweeneys/")

            ("http://feeds.bbci.co.uk/news/world/rss.xml"                    news)
            ("http://feeds.bbci.co.uk/news/business/rss.xml"                 news)
            ("http://feeds.bbci.co.uk/news/technology/rss.xml"               news tech)
            ("http://feeds.bbci.co.uk/news/entertainment_and_arts/rss.xml"   news)

            ("http://en.boxun.com/feed/"                                     news china)

            ("http://feeds.99percentinvisible.org/99percentinvisible" design podcast)
            ("http://feeds.feedburner.com/ucllc/artofthemenu"         design)
            ("http://feeds.feedburner.com/ucllc/brandnew"             design)

            ("http://rss.escapistmagazine.com/news/0.xml"         entertainment videogames)
            ("http://rss.escapistmagazine.com/videos/list/1.xml"  entertainment videogames)
            ("http://www.engadget.com/tag/@gaming/rss.xml"        entertainment videogames)
            ("http://feeds.feedburner.com/RockPaperShotgun"       entertainment videogames)
            ("http://screenrant.com/feed/"                        entertainment movies)

            ;; software
            ("https://news.ycombinator.com/rss"                software news)
            ("http://usesthis.com/feed/"                       software)
            ("http://endlessparentheses.com/atom.xml"          software emacs)
            ("http://feeds.feedburner.com/codinghorror"        software)
            ("http://feeds.feedburner.com/thisdeveloperslife"  software)
            ("http://feeds.feedburner.com/oreilly/news"        software)
            ("http://www.joelonsoftware.com/rss.xml"           software)
            ("http://onethingwell.org/rss"                     software tech)
            ("http://syndication.thedailywtf.com/TheDailyWtf"  software)
            ("http://githubengineering.com/atom.xml"           software tech)

            ("http://pandodaily.com.feedsportal.com/c/35141/f/650422/index.rss"  tech)
            ("https://medium.com/feed/backchannel"                               tech software)
            ("http://feeds.feedburner.com/laptopmag"                             tech)
            ("http://recode.net/feed/"                                           tech)
            ("http://recode.net/category/reviews/feed/"                          tech)
            ("http://feeds.feedburner.com/AndroidPolice"                         tech android)
            ("http://bits.blogs.nytimes.com/feed/"                               tech)

            ("http://www.eater.com/rss/index.xml"                     food)
            ("http://ny.eater.com/rss/index.xml"                      food ny)
            ("http://notwithoutsalt.com/feed/"                        food)
            ("http://feeds.feedburner.com/nymag/Food"                 food)
            ("http://feeds.feedburner.com/seriouseatsfeaturesvideos"  food)
            ("http://feeds.feedburner.com/blogspot/sBff")

            ("http://xkcd.com/rss.xml"                      comic)
            ("http://feeds.feedburner.com/Explosm"          comic)
            ("http://feed.dilbert.com/dilbert/daily_strip"  comic)
            ("http://feeds.feedburner.com/smbc-comics/PvLb" comic)
            ("http://www.questionablecontent.net/QCRSS.xml" comic)
            ("http://phdcomics.com/gradfeed.php"            comic)

            ("http://feeds.feedburner.com/wondermark"       comic)))

       (setq elfeed-max-connections 10)

       (setq url-queue-timeout 30)

       :config
       (bind-key "<SPC>" 'next-line elfeed-search-mode-map))
   #+END_SRC

** =ess=

   #+BEGIN_SRC emacs-lisp
     (use-package ess-site
       :disabled t
       :ensure ess
       :commands (inferior-ess-mode ess-help-mode)
       :init
       (setq inferior-R-args "--quiet")

       :config
       (bind-key "C-c C-w" nil inferior-ess-mode-map))
   #+END_SRC

** Evil (base + extras)

   #+BEGIN_SRC emacs-lisp
     (use-package evil
       :ensure t
       :defines evil-normal-state-map
       :init
       (setq evil-esc-delay 0)

       :config
       (jjin-append-to-list 'evil-emacs-state-modes
         '(eshell-mode
            calendar-mode

            debbugs-gnu-mode

            finder-mode
            info-mode

            eww-mode
            eww-bookmark-mode

            dired-mode
            image-mode
            image-dired-thumbnail-mode
            image-dired-display-image-mode
            pdf-view-mode
            pdf-outline-minor-mode

            git-rebase-mode

            inferior-ess-mode

            help-mode
            ess-help-mode

            paradox-menu-mode

            circe-chat-mode circe-server-mode circe-query-mode circe-channel-mode
            elfeed-search-mode elfeed-show-mode))
       (jjin-append-to-list 'evil-insert-state-modes '(org-capture-mode))

       (bind-keys :map evil-emacs-state-map
         ("<escape>" . evil-execute-in-normal-state)
         ("L"        . evil-end-of-line)
         ("H"        . evil-beginning-of-line)
         ("C-w q"    . delete-window))

       (use-package evil-numbers
         :ensure t
         :config
         (bind-keys :map evil-normal-state-map
           ("C-a"   . evil-numbers/inc-at-pt)
           ("C-c -" . evil-numbers/dec-at-pt)))

       (use-package evil-search-highlight-persist
         :ensure t
         :config
         (bind-key "C-l" 'evil-search-highlight-persist-remove-all
           evil-normal-state-map)
         (global-evil-search-highlight-persist t)

         (set-face-attribute
           'evil-search-highlight-persist-highlight-face
           nil
           :background (face-attribute 'match :background)))

       (evil-mode 1)

       (use-package evil-leader
         :disabled t
         :ensure t
         :config
         (evil-leader/set-leader "<SPC>")
         (global-evil-leader-mode))

       (use-package evil-surround
         :ensure t
         :config
         (global-evil-surround-mode 1))

       (use-package evil-nerd-commenter
         :ensure t
         :config
         (bind-keys :map jjin-comment-map
           ("i" . evilnc-comment-or-uncomment-lines)
           ("l" . evilnc-quick-comment-or-uncomment-to-the-line)
           ("c" . evilnc-copy-and-comment-lines)
           ("p" . evilnc-comment-or-uncomment-paragraphs)
           ("v" . evilnc-toggle-invert-comment-line-by-line))))
   #+END_SRC

** Git

*** =git-commit-mode=

    #+BEGIN_SRC emacs-lisp
      (use-package git-commit-mode
        :commands git-commit-mode)
    #+END_SRC

*** =gitconfig-mode=
    #+BEGIN_SRC emacs-lisp
      (use-package gitconfig-mode
        :ensure t
        :mode "gitconfig")
    #+END_SRC

*** =magit=

    #+BEGIN_SRC emacs-lisp
      (use-package magit
        :ensure t
        :config
        (bind-keys :map jjin-vc-map
          ("s" . magit-status)
          ("b" . magit-blame-mode))
        ;; removes 1.4.0 warning in arguably cleaner way
        (remove-hook 'after-init-hook 'magit-maybe-show-setup-instructions))
    #+END_SRC

** =helm=

   #+BEGIN_SRC emacs-lisp
     (use-package helm
       :ensure t
       :diminish helm-mode
       :bind (("C-x m" . helm-M-x)
               ("H-f f" . helm-find-files)
               ("H-b b" . helm-buffers-list))
       :init
       (setq
         helm-external-programs-associations '(("pdf" . "zathura"))
         helm-split-window-in-side-p t)

       :config
       (helm-mode 1)
       (helm-autoresize-mode t))

     (use-package helm-projectile
       :ensure t
       :config
       (bind-keys :map jjin-project-map
         ("p" . helm-projectile)
         ("f" . helm-projectile-find-file)
         ("F" . helm-projectile-find-file-in-known-projects)
         ("a" . helm-projectile-ag)))

     (use-package helm-swoop
       :disabled t)
   #+END_SRC

** =linum=

   #+BEGIN_SRC emacs-lisp
     (use-package linum
       :ensure t
       :config
       (setq linum-format 'dynamic)
       (global-linum-mode 1)

       (defconst linum-mode-excludes
         '(doc-view-mode

            ;; FIXME: make conditional on num lines
            org-mode

            debbugs-gnu-mode

            pdf-view-mode
            paradox-menu-mode

            magit-mode

            elfeed-show-mode
            elfeed-search-mode
            gnus-group-mode
            mu4e-main-mode
            mu4e-headers-mode
            mu4e-view-mode
            mu4e~update-mail-mode

            circe-chat-mode
            circe-server-mode
            circe-query-mode
            circe-channel-mode
            eww-mode

            inferior-ess-mode)
         "List of major modes preventing linum to be enabled in the buffer.")

       (defadvice linum-mode (around linum-mode-selective activate)
         "Avoids enabling of linum-mode in the buffer having major mode set to one
     of listed in `linum-mode-excludes'."
         (unless (member major-mode linum-mode-excludes)
           ad-do-it))

       (setq linum-relative-current-symbol "")

       (use-package linum-relative)
       (set-face-attribute 'linum nil :background bg-color))
   #+END_SRC

** =fic-mode=

   #+BEGIN_SRC emacs-lisp
     (use-package fic-mode
       :ensure t
       :commands fic-mode
       :diminish fic-mode
       :config
       (add-hook 'prog-mode-hook 'fic-mode)
       (add-hook 'LaTeX-mode-hook 'fic-mode))
   #+END_SRC

** =mu4e=

   #+BEGIN_SRC emacs-lisp
     (use-package mu4e
       :commands (mu4e-main-mode
                   mu4e-view-mode
                   mu4e-about-mode
                   mu4e-headers-mode
                   mu4e-compose-mode)
       :bind (("H-M" . mu4e)
               ("H-m u" . mu4e-update-mail-and-index)
               ("H-m i" . mu4e-interrupt-update-mail))
       :init
       :config
       (bind-key "H-u" 'mu4e-update-mail-and-index mu4e-headers-mode-map)

       (setq
         mu4e-maildir "~/mail"

         mu4e-drafts-folder "/[Gmail].Drafts"
         mu4e-sent-folder   "/[Gmail].Sent Mail"
         mu4e-trash-folder  "/[Gmail].Trash"
         mu4e-refile-folder "/[Gmail].All Mail")

       ;; don't save message to Sent Messages, Gmail/IMAP takes care of this
       ;; (See the documentation for `mu4e-sent-messages-behavior' if you have
       ;; additional non-Gmail addresses and want assign them different
       ;; behavior.)
       (setq mu4e-sent-messages-behavior 'delete)

       ;; you can quickly switch to your Inbox -- press ``ji''
       (setq mu4e-maildir-shortcuts
         '(("/INBOX"               . ?i)
            ("/[Gmail].Sent Mail"   . ?s)
            ("/[Gmail].Trash"       . ?t)
            ("/[Gmail].All Mail"    . ?a)))

       ;; allow for updating mail using 'U' in the main view:
       (setq mu4e-get-mail-command "offlineimap")

       (setq mu4e-user-mail-address-list
         '("jjin082693@gmail.com"
            "jjin082693@uchicago.edu"
            "jonathan@jjin.me"))

       (defvaralias 'mu4e-compose-signature 'message-signature)

       ;; don't keep message buffers around
       (setq message-kill-buffer-on-exit t)

       (setq
         mu4e-html-renderer 'w3m
         mu4e-html2text-command "w3m -dump -T text/html")

       ;; make sure the gnutls command line utils are installed
       ;; (require 'smtpmail)

       (setq
         message-send-mail-function 'smtpmail-send-it
         smtpmail-stream-type 'starttls
         smtpmail-default-smtp-server "smtp.gmail.com"
         smtpmail-smtp-server "smtp.gmail.com"
         smtpmail-smtp-service 587)

       (add-hook 'mu4e-view-mode-hook
         'visual-line-mode)

       (add-hook 'mu4e-compose-pre-hook
         (defun my-set-from-address ()
           "Set the From address based on the To address of the original."
           (let ((msg mu4e-compose-parent-message)) ;; msg is shorter...
             (when msg
               (setq user-mail-address
                 (cond
                   ;; TODO; pull from mu4e-user-mail-address-list
                   ((mu4e-message-contact-field-matches msg :to "jjin082693@gmail.com")
                     "jjin082693@gmail.com")
                   ((mu4e-message-contact-field-matches msg :to "jjin082693@uchicago.edu")
                     "jjin082693@uchicago.edu")
                   (t "jonathan@jjin.me")))))))

       (use-package gnus-dired
         :config
         ;; make the `gnus-dired-mail-buffers' function also work on message-mode derived
         ;; modes, such as mu4e-compose-mode
         (defun gnus-dired-mail-buffers ()
           (let (buffers)
             (save-current-buffer
               (dolist (buffer (buffer-list t))
                 (set-buffer buffer)
                 (when (and (derived-mode-p 'message-mode)
                         (null message-sent-message-via))
                   (push (buffer-name buffer) buffers))))
             (nreverse buffers)))

         (setq gnus-dired-mail-mode 'mu4e-user-agent)
         (add-hook 'dired-mode-hook 'turn-on-gnus-dired-mode))

       (set-face-attribute 'mu4e-header-highlight-face nil :underline nil)

       (setq mu4e-compose-signature-auto-include nil)

       (setq mail-user-agent 'mu4e-user-agent))
   #+END_SRC

** =org-mode=

   #+BEGIN_SRC emacs-lisp
     (use-package org
       :ensure t
       :pin org
       :commands (org-mode org-capture-mode)
       :bind (("H-C" . org-capture)
               ("H-A" . org-agenda)
               ("RET" . org-return-indent))
       :init
       (setq org-agenda-files '("~/agenda")
         org-return-follows-link t

         org-export-dispatch-use-expert-ui t

         org-latex-create-formula-image-program 'imagemagick
         org-latex-listings 'minted
         org-tags-column -80

         org-enforce-todo-dependencies t
         org-enforce-todo-checkbox-dependencies  t

         org-pretty-entities t
         org-src-fontify-natively t
         org-list-allow-alphabetical t

         org-todo-keywords
         '((sequence "TODO(t)" "IN-PROGRESS(r)" "|"  "DONE(d)"))

         org-todo-keyword-faces
         '(("TODO" . org-todo) ("IN-PROGRESS" . "yellow") ("DONE" . org-done))

         org-agenda-custom-commands
         '(("s" "Schoolwork"
             ((agenda "" ((org-agenda-ndays 14)
                           (org-agenda-start-on-weekday nil)
                           (org-agenda-prefix-format " %-12:c%?-12t% s")))
               (tags-todo "CATEGORY=\"Schoolwork\""
                 ((org-agenda-prefix-format "%b")))))

            ("r" "Reading"
              ((tags-todo "CATEGORY=\"Reading\""
                 ((org-agenda-prefix-format "%:T ")))))
            ("m" "Movies"
              ((tags-todo "CATEGORY=\"Movies\""
                 ((org-agenda-prefix-format "%:T "))))))

         org-latex-pdf-process (list "latexmk -shell-escape -pdf %f")

         org-entities-user
         '(("supsetneqq" "\\supsetneqq" t "" "[superset of above not equal to]"
             "[superset of above not equal to]" "⫌")
            ("subsetneqq" "\\subsetneqq" t "" "[suberset of above not equal to]"
              "[suberset of above not equal to]" "⫋")))
       :config
       (use-package ox-latex)
       (use-package ox-bibtex)
       (bind-keys :map org-mode-map
         ("H-t"   . org-todo)
         ("H-e"   . org-export-dispatch)
         ("M-p"   . outline-previous-visible-heading)
         ("M-n"   . outline-next-visible-heading)
         ("H-b t" . org-babel-tangle))

       (bind-keys :map org-src-mode-map
         ("H-s" . org-edit-src-save))

       (plist-put org-format-latex-options :scale 1.5)

       (add-to-list 'org-structure-template-alist
         '("C" "#+BEGIN_COMMENT\n?\n#+END_COMMENT" ""))

       (add-hook 'org-mode-hook 'fic-mode)

       (setq org-latex-packages-alist
         '(("" "minted") ("usenames,dvipsnames,svgnames" "xcolor")))

       (defun my-org-autodone (n-done n-not-done)
         "Switch entry to DONE when all subentries are done, to TODO otherwise."
         (let (org-log-done org-log-states)   ; turn off logging
           (org-todo (if (= n-not-done 0) "DONE" "TODO"))))

       (add-hook 'org-after-todo-statistics-hook 'my-org-autodone)

       (org-babel-do-load-languages
         'org-babel-load-languages
         '((emacs-lisp . t)
            (latex     . t)
            (R         . t)))

       (setq org-confirm-babel-evaluate nil
         org-export-babel-evaluate nil)

       (setq org-latex-minted-options
         '(("linenos" "true")
            ("fontsize" "\\scriptsize")
            ("frame" "lines")
            ("bgcolor" "LightGray")))

       (setq org-export-latex-hyperref-format "\\ref{%s}")

       (setq
         org-src-window-setup 'current-window
         org-agenda-window-setup 'current-window)

       (setq org-blank-before-new-entry
         '((heading . true)
            (plain-list-item . auto)))

       (setq
         ;; FIXME: parameter-ize dir `agenda'
         org-default-notes-file "~/agenda/notes.org"

         org-capture-templates
         '(("r" "Reading" entry (file "~/agenda/reading.org")
             "* TODO %?\n  Entered on %U\n  %i")))

       (setq org-refile-targets '((nil . (:maxlevel . 10))))

       (setq org-export-with-smart-quotes t)

       (use-package toc-org
         :config
         (add-hook 'org-mode-hook 'toc-org-enable)))
   #+END_SRC

** =paradox=

   #+BEGIN_SRC emacs-lisp
     (use-package paradox
       :ensure t
       :config
       (setq paradox-github-token t))
   #+END_SRC

** =pdf-tools=

   #+BEGIN_SRC emacs-lisp
     (use-package pdf-tools
       :config
       (pdf-tools-install))
   #+END_SRC

** =projectile=

   #+BEGIN_SRC emacs-lisp
     (use-package projectile
       :ensure t
       :config
       (setq projectile-enable-caching t
         projectile-completion-system 'grizzl
         projectile-switch-project-action 'helm-projectile)

       (bind-keys :map jjin-project-map
         ("K" . projectile-kill-buffers)
         ("c" . projectile-compile-project))

       (projectile-global-mode))
   #+END_SRC

** =rainbow-mode=

   #+BEGIN_SRC emacs-lisp
     (use-package rainbow-mode
       :ensure t
       :diminish rainbow-mode
       :commands (rainbow-mode)
       :config
       (add-hook 'help-mode-hook 'rainbow-mode))
   #+END_SRC

** =rich-minority-mode=

   #+BEGIN_SRC emacs-lisp
     (use-package rich-minority
       :ensure t
       :config
       (defconst my-rm-excluded-modes
         '(
            " pair"
            " Fill"
            " end"
            " Ace - Window"))
       (dolist (mode my-rm-excluded-modes)
         (add-to-list 'rm-excluded-modes mode)))
   #+END_SRC

** =smart-mode-line=

   #+BEGIN_SRC emacs-lisp
     (use-package smart-mode-line
       :ensure t
       :config
       ;; smart-mode-line initialize
       (sml/setup)
       (smart-mode-line-enable))
   #+END_SRC

** =undo-tree=

   #+BEGIN_SRC emacs-lisp
     (use-package undo-tree
       :diminish undo-tree-mode
       :bind ("C-<backspace>" . undo-tree-undo))
   #+END_SRC

** =web-mode=

   #+BEGIN_SRC emacs-lisp
     (use-package web-mode
       :mode "\\.erb$")
   #+END_SRC

** =window-purpose=

   #+BEGIN_SRC emacs-lisp
     (use-package window-purpose
       :disabled t
       :init
       (setq purpose-user-regexp-purposes
         '(("^\\*elfeed"         . admin)))

       (setq purpose-user-mode-purposes
         '((
            (circe-chat-mode     . comm)
            (circe-query-mode    . comm)
            (circe-lagmon-mode   . comm)
            (circe-server-mode   . comm)

            (haskell-mode        . edit)
            (ess-mode            . edit)
            (gitconfig-mode      . edit)
            (conf-xdefaults-mode . edit)
            (inferior-ess-mode   . interactive)

            (mu4e-main-mode      . admin)
            (mu4e-view-mode      . admin)
            (mu4e-about-mode     . admin)
            (mu4e-headers-mode   . admin)
            (mu4e-compose-mode   . edit)

            (pdf-view-mode       . view)
            (doc-view-mode       . view))))

       :config
       (bind-key "W" 'purpose-set-window-purpose purpose-mode-prefix-map)
       (bind-key "p" 'purpose-set-window-purpose jjin-window-map)

       (purpose-x-magit-multi-on)
       (purpose-compile-user-configuration)

       (purpose-mode)
       (purpose-load-window-layout))
   #+END_SRC

** Language modes

*** Ruby

    #+BEGIN_SRC emacs-lisp
      (use-package enh-ruby-mode
        :disabled t
        :mode ("Gemfile" "Guardfile")
        :config
        (defvaralias 'ruby-indent-level 'tab-width))

      (use-package ruby-end
        :config
        (add-hook 'ruby-mode-hook 'ruby-end-mode))
    #+END_SRC

*** Haskell

    #+BEGIN_SRC emacs-lisp
      (use-package haskell-mode
        :config
        (add-hook 'haskell-mode-hook 'turn-on-haskell-indent))
    #+END_SRC
*** Markdown

    #+BEGIN_SRC emacs-lisp
      (use-package markdown-mode+
        :config
        (add-hook 'markdown-mode-hook 'auto-fill-mode)
        (add-hook 'markdown-mode-hook 'fic-mode))
    #+END_SRC

*** Sass

    #+BEGIN_SRC emacs-lisp
      (use-package sass-mode
        :disabled t
        :init
        (setq scss-compile-at-save nil)
        :config
        (add-hook 'scss-mode-hook 'rainbow-mode))
    #+END_SRC

* (Un)license

  #+BEGIN_SRC text :eval never
    This is free and unencumbered software released into the public domain.

    Anyone is free to copy, modify, publish, use, compile, sell, or
    distribute this software, either in source code form or as a compiled
    binary, for any purpose, commercial or non-commercial, and by any
    means.

    In jurisdictions that recognize copyright laws, the author or authors
    of this software dedicate any and all copyright interest in the
    software to the public domain. We make this dedication for the benefit
    of the public at large and to the detriment of our heirs and
    successors. We intend this dedication to be an overt act of
    relinquishment in perpetuity of all present and future rights to this
    software under copyright law.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
    OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
    ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
    OTHER DEALINGS IN THE SOFTWARE.

    For more information, please refer to <http://unlicense.org>
  #+END_SRC
